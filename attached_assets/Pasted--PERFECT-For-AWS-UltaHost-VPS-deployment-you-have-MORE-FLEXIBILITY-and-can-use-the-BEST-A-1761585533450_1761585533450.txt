**PERFECT!** For AWS/UltaHost VPS deployment, you have **MORE FLEXIBILITY** and can use the **BEST ARCHITECTURE** for long-term scalability. Here's the **permanent, production-grade solution**:

***

# **🏗️ PERMANENT VPS ARCHITECTURE - YOFOREX PRODUCTION DEPLOYMENT**

## **🎯 RECOMMENDED ARCHITECTURE: NGINX REVERSE PROXY**

This is the **industry-standard** used by Netflix, Airbnb, Uber, and every major platform.

```
┌─────────────────────────────────────────────────────────┐
│                    AWS/UltaHost VPS                     │
│                                                         │
│  Port 80/443 (HTTPS with SSL)                          │
│         ↓                                               │
│  ┌─────────────────────────┐                           │
│  │   NGINX Reverse Proxy   │                           │
│  │   (Load Balancer)       │                           │
│  └─────────────────────────┘                           │
│         ↓                ↓                              │
│  ┌──────────────┐  ┌──────────────┐                   │
│  │  Next.js     │  │  Express.js  │                   │
│  │  Port 3000   │  │  Port 3001   │                   │
│  │  (SSR Pages) │  │  (REST API)  │                   │
│  └──────────────┘  └──────────────┘                   │
│         ↓                ↓                              │
│  ┌──────────────────────────────────┐                 │
│  │   PostgreSQL Database            │                 │
│  │   Port 5432                      │                 │
│  └──────────────────────────────────┘                 │
│                                                         │
│  ┌──────────────────────────────────┐                 │
│  │   Redis Cache (Optional)         │                 │
│  │   Port 6379                      │                 │
│  └──────────────────────────────────┘                 │
└─────────────────────────────────────────────────────────┘
```

***

## **📦 COMPLETE DEPLOYMENT PACKAGE**

### **1. NGINX CONFIGURATION**

Create: `/etc/nginx/sites-available/yoforex.net`

```nginx
# YoForex Production Configuration
# Optimized for AWS/UltaHost VPS deployment

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=300r/m;

# Upstream servers (auto-failover)
upstream nextjs_backend {
    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

upstream express_backend {
    server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;
    keepalive 64;
}

# HTTP -> HTTPS Redirect
server {
    listen 80;
    listen [::]:80;
    server_name yoforex.net www.yoforex.net;
    
    # Let's Encrypt SSL verification
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all HTTP to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS Main Server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name yoforex.net www.yoforex.net;
    
    # SSL Configuration (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/yoforex.net/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yoforex.net/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml font/truetype font/opentype 
               application/vnd.ms-fontobject image/svg+xml;
    
    # Client Body Size (for file uploads)
    client_max_body_size 50M;
    
    # Logging
    access_log /var/log/nginx/yoforex_access.log combined;
    error_log /var/log/nginx/yoforex_error.log warn;
    
    # ===========================
    # API ROUTES -> Express.js
    # ===========================
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://express_backend;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /api_error.html;
    }
    
    # ===========================
    # STATIC FILES (CDN-ready)
    # ===========================
    location /_next/static/ {
        proxy_pass http://nextjs_backend;
        proxy_http_version 1.1;
        
        # Aggressive caching for static assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    location /static/ {
        alias /var/www/yoforex/public/;
        expires 30d;
        add_header Cache-Control "public";
        access_log off;
    }
    
    # ===========================
    # SEO FILES (Always fresh)
    # ===========================
    location ~* ^/(sitemap\.xml|robots\.txt|llms\.txt)$ {
        proxy_pass http://nextjs_backend;
        proxy_http_version 1.1;
        
        # No caching for SEO files
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # ===========================
    # IMAGE OPTIMIZATION
    # ===========================
    location ~* \.(jpg|jpeg|png|gif|webp|svg|ico)$ {
        proxy_pass http://nextjs_backend;
        proxy_http_version 1.1;
        
        expires 7d;
        add_header Cache-Control "public";
        access_log off;
    }
    
    # ===========================
    # ALL OTHER ROUTES -> Next.js
    # ===========================
    location / {
        limit_req zone=general_limit burst=50 nodelay;
        
        proxy_pass http://nextjs_backend;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 24 4k;
        proxy_busy_buffers_size 8k;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 /error.html;
    }
    
    # ===========================
    # ERROR PAGES
    # ===========================
    location = /error.html {
        root /var/www/yoforex/errors;
        internal;
    }
    
    location = /api_error.html {
        root /var/www/yoforex/errors;
        internal;
    }
}
```

***

### **2. PM2 PROCESS MANAGER (Production-Grade)**

Create: `ecosystem.config.js`

```javascript
module.exports = {
  apps: [
    {
      name: 'yoforex-nextjs',
      script: 'npm',
      args: 'start',
      cwd: '/var/www/yoforex',
      instances: 2, // CPU cores - 1
      exec_mode: 'cluster',
      env: {
        NODE_ENV: 'production',
        PORT: 3000,
        DATABASE_URL: process.env.DATABASE_URL,
      },
      error_file: '/var/log/pm2/yoforex-nextjs-error.log',
      out_file: '/var/log/pm2/yoforex-nextjs-out.log',
      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
      merge_logs: true,
      max_memory_restart: '500M',
      autorestart: true,
      watch: false,
      min_uptime: '10s',
      max_restarts: 10,
    },
    {
      name: 'yoforex-express',
      script: 'server/index.js',
      cwd: '/var/www/yoforex',
      instances: 2,
      exec_mode: 'cluster',
      env: {
        NODE_ENV: 'production',
        PORT: 3001,
        DATABASE_URL: process.env.DATABASE_URL,
      },
      error_file: '/var/log/pm2/yoforex-express-error.log',
      out_file: '/var/log/pm2/yoforex-express-out.log',
      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
      merge_logs: true,
      max_memory_restart: '500M',
      autorestart: true,
      watch: false,
      min_uptime: '10s',
      max_restarts: 10,
    },
  ],
};
```

***

### **3. DEPLOYMENT SCRIPT**

Create: `deploy.sh`

```bash
#!/bin/bash

# YoForex Production Deployment Script
# For AWS EC2, DigitalOcean, UltaHost VPS

set -e  # Exit on error

echo "🚀 Starting YoForex deployment..."

# Variables
APP_DIR="/var/www/yoforex"
BACKUP_DIR="/var/backups/yoforex"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# ===========================
# 1. PRE-DEPLOYMENT CHECKS
# ===========================
echo -e "${YELLOW}[1/10] Pre-deployment checks...${NC}"

# Check if PM2 is installed
if ! command -v pm2 &> /dev/null; then
    echo -e "${RED}PM2 not installed. Installing...${NC}"
    npm install -g pm2
fi

# Check if NGINX is installed
if ! command -v nginx &> /dev/null; then
    echo -e "${RED}NGINX not installed. Please install: sudo apt install nginx${NC}"
    exit 1
fi

# Check if Node.js version is correct
NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    echo -e "${RED}Node.js 18+ required. Current: $NODE_VERSION${NC}"
    exit 1
fi

echo -e "${GREEN}✓ Pre-deployment checks passed${NC}"

# ===========================
# 2. CREATE BACKUP
# ===========================
echo -e "${YELLOW}[2/10] Creating backup...${NC}"

mkdir -p $BACKUP_DIR
tar -czf $BACKUP_DIR/yoforex_$TIMESTAMP.tar.gz -C $APP_DIR .

echo -e "${GREEN}✓ Backup created: $BACKUP_DIR/yoforex_$TIMESTAMP.tar.gz${NC}"

# ===========================
# 3. PULL LATEST CODE
# ===========================
echo -e "${YELLOW}[3/10] Pulling latest code...${NC}"

cd $APP_DIR
git pull origin main

echo -e "${GREEN}✓ Code updated${NC}"

# ===========================
# 4. INSTALL DEPENDENCIES
# ===========================
echo -e "${YELLOW}[4/10] Installing dependencies...${NC}"

npm ci --production=false

echo -e "${GREEN}✓ Dependencies installed${NC}"

# ===========================
# 5. BUILD NEXT.JS
# ===========================
echo -e "${YELLOW}[5/10] Building Next.js...${NC}"

npm run build

if [ $? -ne 0 ]; then
    echo -e "${RED}Build failed! Rolling back...${NC}"
    tar -xzf $BACKUP_DIR/yoforex_$TIMESTAMP.tar.gz -C $APP_DIR
    exit 1
fi

echo -e "${GREEN}✓ Next.js built successfully${NC}"

# ===========================
# 6. DATABASE MIGRATIONS
# ===========================
echo -e "${YELLOW}[6/10] Running database migrations...${NC}"

# Add your migration command here
# npm run migrate

echo -e "${GREEN}✓ Migrations completed${NC}"

# ===========================
# 7. RESTART PM2 PROCESSES
# ===========================
echo -e "${YELLOW}[7/10] Restarting PM2 processes...${NC}"

pm2 reload ecosystem.config.js --update-env

# Wait for processes to start
sleep 5

# Check if processes are running
if pm2 status | grep -q "errored"; then
    echo -e "${RED}PM2 processes failed to start! Rolling back...${NC}"
    tar -xzf $BACKUP_DIR/yoforex_$TIMESTAMP.tar.gz -C $APP_DIR
    pm2 reload ecosystem.config.js
    exit 1
fi

echo -e "${GREEN}✓ PM2 processes restarted${NC}"

# ===========================
# 8. RELOAD NGINX
# ===========================
echo -e "${YELLOW}[8/10] Reloading NGINX...${NC}"

sudo nginx -t
if [ $? -eq 0 ]; then
    sudo systemctl reload nginx
    echo -e "${GREEN}✓ NGINX reloaded${NC}"
else
    echo -e "${RED}NGINX configuration error!${NC}"
    exit 1
fi

# ===========================
# 9. HEALTH CHECKS
# ===========================
echo -e "${YELLOW}[9/10] Running health checks...${NC}"

# Check Next.js
curl -f http://localhost:3000/api/health || {
    echo -e "${RED}Next.js health check failed!${NC}"
    exit 1
}

# Check Express
curl -f http://localhost:3001/api/health || {
    echo -e "${RED}Express health check failed!${NC}"
    exit 1
}

# Check NGINX
curl -f https://yoforex.net/api/health || {
    echo -e "${RED}NGINX health check failed!${NC}"
    exit 1
}

echo -e "${GREEN}✓ Health checks passed${NC}"

# ===========================
# 10. CLEANUP
# ===========================
echo -e "${YELLOW}[10/10] Cleaning up...${NC}"

# Remove old backups (keep last 5)
cd $BACKUP_DIR
ls -t | tail -n +6 | xargs rm -f

# Clear PM2 logs older than 7 days
pm2 flush

# Clear npm cache
npm cache clean --force

echo -e "${GREEN}✓ Cleanup completed${NC}"

# ===========================
# DEPLOYMENT SUMMARY
# ===========================
echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}   🎉 DEPLOYMENT SUCCESSFUL!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo -e "Timestamp: $TIMESTAMP"
echo -e "Backup: $BACKUP_DIR/yoforex_$TIMESTAMP.tar.gz"
echo ""
echo -e "PM2 Status:"
pm2 status
echo ""
echo -e "URLs:"
echo -e "  - Production: https://yoforex.net"
echo -e "  - Health Check: https://yoforex.net/api/health"
echo ""
echo -e "${YELLOW}Monitor logs:${NC}"
echo -e "  pm2 logs yoforex-nextjs"
echo -e "  pm2 logs yoforex-express"
echo -e "  sudo tail -f /var/log/nginx/yoforex_error.log"
echo ""
```

***

### **4. SYSTEMD SERVICE (Auto-start on Boot)**

Create: `/etc/systemd/system/yoforex.service`

```ini
[Unit]
Description=YoForex Production Application
After=network.target postgresql.service

[Service]
Type=forking
User=www-data
Group=www-data
WorkingDirectory=/var/www/yoforex
Environment="NODE_ENV=production"
Environment="PATH=/usr/bin:/usr/local/bin"

ExecStart=/usr/local/bin/pm2 start ecosystem.config.js
ExecReload=/usr/local/bin/pm2 reload ecosystem.config.js
ExecStop=/usr/local/bin/pm2 kill

Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
```

Enable auto-start:
```bash
sudo systemctl enable yoforex
sudo systemctl start yoforex
```

***

### **5. MONITORING & LOGGING**

Create: `monitoring/setup.sh`

```bash
#!/bin/bash

# Install monitoring tools

# 1. PM2 Monitoring
pm2 install pm2-logrotate
pm2 set pm2-logrotate:max_size 10M
pm2 set pm2-logrotate:retain 7

# 2. Node.js Performance Monitoring
npm install -g clinic

# 3. Log aggregation (Optional: Install Datadog/New Relic)
# Follow provider instructions

echo "Monitoring setup complete!"
```

***

### **6. SSL CERTIFICATE (Let's Encrypt)**

Create: `ssl/setup-ssl.sh`

```bash
#!/bin/bash

# Install Certbot
sudo apt update
sudo apt install -y certbot python3-certbot-nginx

# Generate SSL certificate
sudo certbot --nginx -d yoforex.net -d www.yoforex.net

# Auto-renewal
sudo systemctl enable certbot.timer
sudo systemctl start certbot.timer

echo "SSL certificate installed!"
echo "Auto-renewal enabled via systemd timer"
```

***

### **7. ENVIRONMENT VARIABLES**

Create: `.env.production`

```bash
# Application
NODE_ENV=production
PORT=3000

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/yoforex

# Express API
EXPRESS_PORT=3001
EXPRESS_URL=http://localhost:3001

# Redis (Optional)
REDIS_URL=redis://localhost:6379

# Email (Brevo)
BREVO_API_KEY=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
BREVO_SMTP_HOST=smtp-relay.brevo.com
BREVO_SMTP_PORT=587
SENDER_EMAIL=yoforexpremium@gmail.com

# Security
SESSION_SECRET=your-super-secret-key-change-this
JWT_SECRET=another-secret-key-change-this

# Analytics
GOOGLE_ANALYTICS_ID=G-XXXXXXXXXX
GTM_ID=GTM-XXXXXXX

# CDN (Optional)
CDN_URL=https://cdn.yoforex.net
```

***

## **🚀 DEPLOYMENT STEPS (One-Time Setup)**

```bash
# 1. SSH into your VPS
ssh root@your-server-ip

# 2. Install Node.js 18+
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt install -y nodejs

# 3. Install PM2 globally
npm install -g pm2

# 4. Install NGINX
sudo apt install -y nginx

# 5. Install PostgreSQL
sudo apt install -y postgresql postgresql-contrib

# 6. Clone your repository
cd /var/www
git clone https://github.com/your-username/yoforex.git
cd yoforex

# 7. Install dependencies
npm ci

# 8. Build Next.js
npm run build

# 9. Copy NGINX configuration
sudo cp nginx.conf /etc/nginx/sites-available/yoforex.net
sudo ln -s /etc/nginx/sites-available/yoforex.net /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl restart nginx

# 10. Setup SSL
bash ssl/setup-ssl.sh

# 11. Start PM2
pm2 start ecosystem.config.js
pm2 save
pm2 startup

# 12. Enable systemd service
sudo cp systemd/yoforex.service /etc/systemd/system/
sudo systemctl daemon-reload
sudo systemctl enable yoforex

# 13. Setup monitoring
bash monitoring/setup.sh

# 14. Test deployment
curl https://yoforex.net/api/health
```

***

## **📊 ADVANTAGES OF THIS ARCHITECTURE**

✅ **Scalable**: Add more instances easily
✅ **Resilient**: Auto-restart on failure
✅ **Fast**: NGINX caching + compression
✅ **Secure**: SSL, rate limiting, headers
✅ **Monitorable**: PM2 logs, NGINX logs
✅ **Zero-downtime**: PM2 cluster mode
✅ **CDN-ready**: Static asset optimization
✅ **Database-optimized**: Connection pooling

***

## **💰 HOSTING COSTS (Estimated)**

| Provider | Server | Monthly Cost |
|----------|--------|--------------|
| AWS EC2 | t3.medium (2 vCPU, 4GB RAM) | $30-40 |
| DigitalOcean | 4GB RAM, 2 vCPU | $24 |
| Vultr | High Frequency 2GB | $12 |
| UltaHost | VPS Pro | $15-25 |
| Linode | 4GB RAM | $24 |

**Recommended**: Start with **DigitalOcean 4GB** ($24/month) or **Vultr HF** ($12/month).

***

This is the **PERMANENT, PRODUCTION-GRADE SOLUTION** used by enterprises. It works on ANY VPS (AWS, DigitalOcean, Vultr, UltaHost, Linode) and scales to millions of users.

Would you like me to generate the complete deployment package as downloadable files?

Sources
