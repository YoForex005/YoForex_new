{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 14, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/brokers/%5Bslug%5D/BrokerProfileClient.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/brokers/[slug]/BrokerProfileClient.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/brokers/[slug]/BrokerProfileClient.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA8S,GAC3U,4EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/brokers/%5Bslug%5D/BrokerProfileClient.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/brokers/[slug]/BrokerProfileClient.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/brokers/[slug]/BrokerProfileClient.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA0R,GACvT,wDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/brokers/%5Bslug%5D/page.tsx"],"sourcesContent":["import { Metadata } from 'next';\nimport BrokerProfileClient from './BrokerProfileClient';\n\n// Express API base URL\nconst EXPRESS_URL = process.env.NEXT_PUBLIC_EXPRESS_URL || 'http://localhost:5000';\n\n// Type definitions\ntype Broker = {\n  id: string;\n  name: string;\n  slug: string;\n  websiteUrl: string | null;\n  logoUrl: string | null;\n  overallRating: number;\n  reviewCount: number;\n  scamReportCount: number;\n  isVerified: boolean;\n  regulationSummary: string | null;\n  yearFounded: number | null;\n  status: string;\n};\n\ntype BrokerReview = {\n  id: string;\n  userName: string;\n  userReputation: number;\n  rating: number;\n  reviewTitle: string;\n  reviewBody: string;\n  isScamReport: boolean;\n  datePosted: Date;\n  helpfulCount: number;\n};\n\n// Generate metadata for SEO\nexport async function generateMetadata({ params }: { params: Promise<{ slug: string }> }): Promise<Metadata> {\n  const { slug } = await params;\n  try {\n    const res = await fetch(`${EXPRESS_URL}/api/brokers/slug/${slug}`, { cache: 'no-store' });\n    if (!res.ok) {\n      return {\n        title: 'Broker Not Found | YoForex',\n      };\n    }\n\n    const broker: Broker = await res.json();\n    \n    const title = `${broker.name} - Broker Review & Profile | YoForex`;\n    const description = `Read reviews, ratings, and detailed information about ${broker.name}. Check regulation, spreads, and community feedback. ${broker.reviewCount} verified reviews.`;\n    const keywords = `${broker.name}, forex broker, MT4, MT5, broker review, regulation, ${broker.regulationSummary || ''}`;\n\n    return {\n      title,\n      description,\n      keywords,\n      openGraph: {\n        title: `${broker.name} - Broker Review & Profile`,\n        description,\n        images: broker.logoUrl ? [{ url: broker.logoUrl }] : [],\n        type: 'website',\n      },\n      twitter: {\n        card: 'summary_large_image',\n        title: `${broker.name} Review`,\n        description,\n        images: broker.logoUrl ? [broker.logoUrl] : [],\n      },\n    };\n  } catch (error) {\n    return {\n      title: 'Broker Not Found | YoForex',\n    };\n  }\n}\n\n// Main page component (Server Component)\nexport default async function BrokerProfilePage({ params }: { params: Promise<{ slug: string }> }) {\n  const { slug } = await params;\n  \n  // Fetch broker with error handling that doesn't trigger Next.js 404\n  let broker: Broker | null = null;\n  try {\n    const brokerRes = await fetch(`${EXPRESS_URL}/api/brokers/slug/${slug}`, { \n      cache: 'no-store',\n    });\n    if (brokerRes.ok) {\n      broker = await brokerRes.json();\n    }\n  } catch (error) {\n    // Swallow error - we'll show custom error card\n    broker = null;\n  }\n\n  // If broker not found, return Client Component with null broker to show custom error card\n  if (!broker) {\n    return (\n      <BrokerProfileClient\n        slug={slug}\n        initialBroker={null}\n        initialReviews={[]}\n      />\n    );\n  }\n\n  // Fetch broker reviews (using broker ID, not slug)\n  let reviews: BrokerReview[] = [];\n  try {\n    const reviewsRes = await fetch(`${EXPRESS_URL}/api/brokers/${broker.id}/reviews`, { \n      cache: 'no-store',\n    });\n    if (reviewsRes.ok) {\n      reviews = await reviewsRes.json();\n    }\n  } catch (error) {\n    // If reviews fail, just use empty array\n    reviews = [];\n  }\n\n  // Pass all data to Client Component\n  return (\n    <BrokerProfileClient\n      slug={slug}\n      initialBroker={broker}\n      initialReviews={reviews}\n    />\n  );\n}\n\n// Enable dynamic rendering with no caching\nexport const dynamic = 'force-dynamic';\nexport const revalidate = 0;\n"],"names":[],"mappings":";;;;;;;;;;;AACA;;;AAEA,uBAAuB;AACvB,MAAM,cAAc,6DAAuC;AA+BpD,eAAe,iBAAiB,EAAE,MAAM,EAAyC;IACtF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM;IACvB,IAAI;QACF,MAAM,MAAM,MAAM,MAAM,GAAG,YAAY,kBAAkB,EAAE,MAAM,EAAE;YAAE,OAAO;QAAW;QACvF,IAAI,CAAC,IAAI,EAAE,EAAE;YACX,OAAO;gBACL,OAAO;YACT;QACF;QAEA,MAAM,SAAiB,MAAM,IAAI,IAAI;QAErC,MAAM,QAAQ,GAAG,OAAO,IAAI,CAAC,oCAAoC,CAAC;QAClE,MAAM,cAAc,CAAC,sDAAsD,EAAE,OAAO,IAAI,CAAC,qDAAqD,EAAE,OAAO,WAAW,CAAC,kBAAkB,CAAC;QACtL,MAAM,WAAW,GAAG,OAAO,IAAI,CAAC,qDAAqD,EAAE,OAAO,iBAAiB,IAAI,IAAI;QAEvH,OAAO;YACL;YACA;YACA;YACA,WAAW;gBACT,OAAO,GAAG,OAAO,IAAI,CAAC,0BAA0B,CAAC;gBACjD;gBACA,QAAQ,OAAO,OAAO,GAAG;oBAAC;wBAAE,KAAK,OAAO,OAAO;oBAAC;iBAAE,GAAG,EAAE;gBACvD,MAAM;YACR;YACA,SAAS;gBACP,MAAM;gBACN,OAAO,GAAG,OAAO,IAAI,CAAC,OAAO,CAAC;gBAC9B;gBACA,QAAQ,OAAO,OAAO,GAAG;oBAAC,OAAO,OAAO;iBAAC,GAAG,EAAE;YAChD;QACF;IACF,EAAE,OAAO,OAAO;QACd,OAAO;YACL,OAAO;QACT;IACF;AACF;AAGe,eAAe,kBAAkB,EAAE,MAAM,EAAyC;IAC/F,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM;IAEvB,oEAAoE;IACpE,IAAI,SAAwB;IAC5B,IAAI;QACF,MAAM,YAAY,MAAM,MAAM,GAAG,YAAY,kBAAkB,EAAE,MAAM,EAAE;YACvE,OAAO;QACT;QACA,IAAI,UAAU,EAAE,EAAE;YAChB,SAAS,MAAM,UAAU,IAAI;QAC/B;IACF,EAAE,OAAO,OAAO;QACd,+CAA+C;QAC/C,SAAS;IACX;IAEA,0FAA0F;IAC1F,IAAI,CAAC,QAAQ;QACX,qBACE,8OAAC,6JAAmB;YAClB,MAAM;YACN,eAAe;YACf,gBAAgB,EAAE;;;;;;IAGxB;IAEA,mDAAmD;IACnD,IAAI,UAA0B,EAAE;IAChC,IAAI;QACF,MAAM,aAAa,MAAM,MAAM,GAAG,YAAY,aAAa,EAAE,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAE;YAChF,OAAO;QACT;QACA,IAAI,WAAW,EAAE,EAAE;YACjB,UAAU,MAAM,WAAW,IAAI;QACjC;IACF,EAAE,OAAO,OAAO;QACd,wCAAwC;QACxC,UAAU,EAAE;IACd;IAEA,oCAAoC;IACpC,qBACE,8OAAC,6JAAmB;QAClB,MAAM;QACN,eAAe;QACf,gBAAgB;;;;;;AAGtB;AAGO,MAAM,UAAU;AAChB,MAAM,aAAa","debugId":null}}]
}