{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/admin/sections/AIAutomation.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from \"recharts\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Play, Ban } from \"lucide-react\";\n\nexport default function AIAutomation() {\n  const { toast } = useToast();\n  const [isCreateRuleOpen, setIsCreateRuleOpen] = useState(false);\n  const [sensitivity, setSensitivity] = useState([70]);\n\n  const { data: automationRules, isLoading: rulesLoading } = useQuery({\n    queryKey: [\"/api/admin/ai/automation-rules\"]\n  });\n\n  const { data: moderationStats, isLoading: moderationStatsLoading } = useQuery({\n    queryKey: [\"/api/admin/ai/moderation-stats\"]\n  });\n\n  const { data: moderationDecisions, isLoading: decisionsLoading } = useQuery({\n    queryKey: [\"/api/admin/ai/moderation-decisions\"]\n  });\n\n  const { data: sentimentData, isLoading: sentimentLoading } = useQuery({\n    queryKey: [\"/api/admin/ai/sentiment-distribution\"]\n  });\n\n  const { data: spamMetrics, isLoading: spamMetricsLoading } = useQuery({\n    queryKey: [\"/api/admin/ai/spam-metrics\"]\n  });\n\n  const { data: flaggedContent, isLoading: flaggedLoading } = useQuery({\n    queryKey: [\"/api/admin/ai/flagged-content\"]\n  });\n\n  const createRuleMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"/api/admin/ai/automation-rules\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/ai/automation-rules\"] });\n      toast({ title: \"Rule created successfully\" });\n      setIsCreateRuleOpen(false);\n    }\n  });\n\n  const toggleRuleMutation = useMutation({\n    mutationFn: ({ id, enabled }: { id: string; enabled: boolean }) => \n      apiRequest(`/api/admin/ai/automation-rules/${id}/toggle`, \"PATCH\", { enabled }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/ai/automation-rules\"] });\n      toast({ title: \"Rule updated\" });\n    }\n  });\n\n  const executeRuleMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/admin/ai/automation-rules/${id}/execute`, \"POST\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/ai/automation-rules\"] });\n      toast({ title: \"Rule executed successfully\" });\n    }\n  });\n\n  const overrideDecisionMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/admin/ai/moderation-decisions/${id}/override`, \"POST\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/ai/moderation-decisions\"] });\n      toast({ title: \"Decision overridden\" });\n    }\n  });\n\n  const updateSensitivityMutation = useMutation({\n    mutationFn: (value: number) => apiRequest(\"/api/admin/ai/spam-sensitivity\", \"PATCH\", { sensitivity: value }),\n    onSuccess: () => {\n      toast({ title: \"Sensitivity updated\" });\n    }\n  });\n\n  const handleCreateRule = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    \n    const triggerConfig = formData.get(\"triggerConfig\") as string;\n    const actionConfig = formData.get(\"actionConfig\") as string;\n\n    try {\n      JSON.parse(triggerConfig);\n      JSON.parse(actionConfig);\n    } catch (error) {\n      toast({ title: \"Invalid JSON in configuration\", variant: \"destructive\" });\n      return;\n    }\n\n    createRuleMutation.mutate({\n      name: formData.get(\"name\"),\n      triggerType: formData.get(\"triggerType\"),\n      triggerConfig,\n      actionType: formData.get(\"actionType\"),\n      actionConfig\n    });\n  };\n\n  const COLORS = ['hsl(var(--primary))', 'hsl(var(--accent))', 'hsl(var(--muted))'];\n\n  return (\n    <div className=\"space-y-6\">\n      <h1 className=\"text-3xl font-bold\">AI & Automation</h1>\n\n      <Tabs defaultValue=\"automation\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"automation\" data-testid=\"tab-automation\">Automation Rules</TabsTrigger>\n          <TabsTrigger value=\"moderation\" data-testid=\"tab-moderation\">Content Moderation AI</TabsTrigger>\n          <TabsTrigger value=\"spam\" data-testid=\"tab-spam\">Spam Detection</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"automation\" className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Automation Rules</h2>\n            <Dialog open={isCreateRuleOpen} onOpenChange={setIsCreateRuleOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-rule\">Create Rule</Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Create Automation Rule</DialogTitle>\n                </DialogHeader>\n                <form onSubmit={handleCreateRule} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Rule Name</Label>\n                    <Input id=\"name\" name=\"name\" required data-testid=\"input-rule-name\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"triggerType\">Trigger Type</Label>\n                    <Select name=\"triggerType\" required>\n                      <SelectTrigger data-testid=\"select-trigger-type\">\n                        <SelectValue placeholder=\"Select trigger type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"user_signup\">User Signup</SelectItem>\n                        <SelectItem value=\"content_published\">Content Published</SelectItem>\n                        <SelectItem value=\"time_based\">Time Based</SelectItem>\n                        <SelectItem value=\"threshold_reached\">Threshold Reached</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"triggerConfig\">Trigger Configuration (JSON)</Label>\n                    <Textarea \n                      id=\"triggerConfig\" \n                      name=\"triggerConfig\" \n                      placeholder='{\"key\": \"value\"}'\n                      className=\"font-mono text-sm\"\n                      required\n                      data-testid=\"textarea-trigger-config\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"actionType\">Action Type</Label>\n                    <Select name=\"actionType\" required>\n                      <SelectTrigger data-testid=\"select-action-type\">\n                        <SelectValue placeholder=\"Select action type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"send_email\">Send Email</SelectItem>\n                        <SelectItem value=\"create_notification\">Create Notification</SelectItem>\n                        <SelectItem value=\"award_coins\">Award Coins</SelectItem>\n                        <SelectItem value=\"assign_badge\">Assign Badge</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"actionConfig\">Action Configuration (JSON)</Label>\n                    <Textarea \n                      id=\"actionConfig\" \n                      name=\"actionConfig\" \n                      placeholder='{\"key\": \"value\"}'\n                      className=\"font-mono text-sm\"\n                      required\n                      data-testid=\"textarea-action-config\"\n                    />\n                  </div>\n                  <DialogFooter>\n                    <Button type=\"submit\" disabled={createRuleMutation.isPending} data-testid=\"button-submit-rule\">\n                      {createRuleMutation.isPending ? \"Creating...\" : \"Create Rule\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              {rulesLoading ? (\n                <div className=\"p-4 space-y-2\">\n                  {[...Array(5)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-12\" />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Trigger</TableHead>\n                        <TableHead>Action</TableHead>\n                        <TableHead>Executions</TableHead>\n                        <TableHead>Last Executed</TableHead>\n                        <TableHead>Enabled</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {automationRules?.map((rule: any) => (\n                        <TableRow key={rule.id} data-testid={`rule-${rule.id}`}>\n                          <TableCell data-testid={`rule-name-${rule.id}`}>{rule.name}</TableCell>\n                          <TableCell>{rule.triggerType}</TableCell>\n                          <TableCell>{rule.actionType}</TableCell>\n                          <TableCell>{rule.executionCount || 0}</TableCell>\n                          <TableCell>\n                            {rule.lastExecutedAt ? formatDistanceToNow(new Date(rule.lastExecutedAt), { addSuffix: true }) : 'Never'}\n                          </TableCell>\n                          <TableCell>\n                            <Switch \n                              checked={rule.enabled}\n                              onCheckedChange={(checked) => toggleRuleMutation.mutate({ id: rule.id, enabled: checked })}\n                              data-testid={`switch-rule-${rule.id}`}\n                            />\n                          </TableCell>\n                          <TableCell>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => executeRuleMutation.mutate(rule.id)}\n                              disabled={executeRuleMutation.isPending}\n                              data-testid={`button-execute-${rule.id}`}\n                            >\n                              <Play className=\"w-3 h-3 mr-1\" />\n                              Execute\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                      {(!automationRules || automationRules.length === 0) && (\n                        <TableRow>\n                          <TableCell colSpan={7} className=\"text-center text-muted-foreground py-8\">\n                            No automation rules created\n                          </TableCell>\n                        </TableRow>\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"moderation\" className=\"space-y-4\">\n          <h2 className=\"text-xl font-semibold\">Content Moderation AI</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {moderationStatsLoading ? (\n              [...Array(4)].map((_, i) => <Skeleton key={i} className=\"h-32\" />)\n            ) : (\n              <>\n                <Card data-testid=\"card-accuracy-rate\">\n                  <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Accuracy Rate</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-accuracy-rate\">\n                      {moderationStats?.accuracyRate || 0}%\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-false-positives\">\n                  <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">False Positives</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-false-positives\">\n                      {moderationStats?.falsePositives || 0}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-false-negatives\">\n                  <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">False Negatives</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-false-negatives\">\n                      {moderationStats?.falseNegatives || 0}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-time-saved\">\n                  <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Time Saved</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-time-saved\">\n                      {moderationStats?.timeSavedHours || 0}h\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent AI Decisions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {decisionsLoading ? (\n                  <div className=\"space-y-2\">\n                    {[...Array(5)].map((_, i) => <Skeleton key={i} className=\"h-12\" />)}\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Content</TableHead>\n                          <TableHead>Decision</TableHead>\n                          <TableHead>Confidence</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {moderationDecisions?.map((decision: any) => (\n                          <TableRow key={decision.id}>\n                            <TableCell className=\"max-w-xs truncate\">{decision.contentPreview}</TableCell>\n                            <TableCell>\n                              <Badge variant={decision.decision === 'approved' ? 'default' : 'destructive'}>\n                                {decision.decision}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>{decision.confidence}%</TableCell>\n                            <TableCell>\n                              <Button \n                                size=\"sm\" \n                                variant=\"outline\"\n                                onClick={() => overrideDecisionMutation.mutate(decision.id)}\n                                data-testid={`button-override-${decision.id}`}\n                              >\n                                Override\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                        {(!moderationDecisions || moderationDecisions.length === 0) && (\n                          <TableRow>\n                            <TableCell colSpan={4} className=\"text-center text-muted-foreground py-8\">\n                              No recent decisions\n                            </TableCell>\n                          </TableRow>\n                        )}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Sentiment Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {sentimentLoading ? (\n                  <Skeleton className=\"h-64\" />\n                ) : sentimentData && sentimentData.length > 0 ? (\n                  <ResponsiveContainer width=\"100%\" height={250}>\n                    <PieChart>\n                      <Pie\n                        data={sentimentData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={(entry) => entry.name}\n                        outerRadius={80}\n                        fill=\"hsl(var(--primary))\"\n                        dataKey=\"value\"\n                      >\n                        {sentimentData.map((entry: any, index: number) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                      <Legend />\n                    </PieChart>\n                  </ResponsiveContainer>\n                ) : (\n                  <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                    No data available\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"spam\" className=\"space-y-4\">\n          <h2 className=\"text-xl font-semibold\">Spam Detection</h2>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {spamMetricsLoading ? (\n              [...Array(3)].map((_, i) => <Skeleton key={i} className=\"h-32\" />)\n            ) : (\n              <>\n                <Card data-testid=\"card-spam-accuracy\">\n                  <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Detection Accuracy</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-spam-accuracy\">\n                      {spamMetrics?.accuracy || 0}%\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-spam-blocked\">\n                  <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Spam Blocked</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-spam-blocked\">\n                      {spamMetrics?.blocked || 0}\n                    </div>\n                  </CardContent>\n                </Card>\n                <Card data-testid=\"card-spam-flagged\">\n                  <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Currently Flagged</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-spam-flagged\">\n                      {spamMetrics?.flagged || 0}\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            )}\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Adjust Sensitivity</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Sensitivity Level: {sensitivity[0]}%</Label>\n                <Slider\n                  value={sensitivity}\n                  onValueChange={setSensitivity}\n                  max={100}\n                  step={1}\n                  data-testid=\"slider-sensitivity\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Higher values will flag more content as potential spam\n                </p>\n              </div>\n              <Button \n                onClick={() => updateSensitivityMutation.mutate(sensitivity[0])}\n                disabled={updateSensitivityMutation.isPending}\n                data-testid=\"button-update-sensitivity\"\n              >\n                Update Sensitivity\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Flagged Content</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {flaggedLoading ? (\n                <div className=\"space-y-2\">\n                  {[...Array(5)].map((_, i) => <Skeleton key={i} className=\"h-12\" />)}\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Content</TableHead>\n                        <TableHead>Spam Score</TableHead>\n                        <TableHead>Author</TableHead>\n                        <TableHead>Flagged At</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {flaggedContent?.map((item: any) => (\n                        <TableRow key={item.id}>\n                          <TableCell className=\"max-w-xs truncate\">{item.contentPreview}</TableCell>\n                          <TableCell>\n                            <Badge variant={item.spamScore > 80 ? 'destructive' : 'secondary'}>\n                              {item.spamScore}%\n                            </Badge>\n                          </TableCell>\n                          <TableCell>{item.authorUsername}</TableCell>\n                          <TableCell>{formatDistanceToNow(new Date(item.flaggedAt), { addSuffix: true })}</TableCell>\n                          <TableCell>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              data-testid={`button-review-${item.id}`}\n                            >\n                              Review\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                      {(!flaggedContent || flaggedContent.length === 0) && (\n                        <TableRow>\n                          <TableCell colSpan={5} className=\"text-center text-muted-foreground py-8\">\n                            No flagged content\n                          </TableCell>\n                        </TableRow>\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}